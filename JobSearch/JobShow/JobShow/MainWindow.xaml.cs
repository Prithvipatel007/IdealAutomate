using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Diagnostics;
using System.Data;
using System.Data.SqlClient;
using System.Collections;


namespace DataGridColumnsDemo
{
    public partial class MainWindow : Window
         
    {
        string strConnectionString = null;
        public MainWindow()
        {
            InitializeComponent();
           
            SetUpPlanets();
        }

  
        public void SetUpPlanets()
        { // ********************************************************************
          // Code Generated by Ideal Tools Organizer at http://idealautomate.com
          // ********************************************************************
          // Define Query String
          //  "Select * from jobapplications  where dateadded >  cast('06/20/2020' as date)" +
            string queryString =
                "Select * from jobapplications where dateadded >  cast('07/01/2020' as date)  and applicationstatus is null -- where jobboard = 'dice' and location <> 'remote' and applicationstatus is null" +
               "";
            // Define Connection String
            string strConnectionString = null;
            strConnectionString = @"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI";
            // Define .net fields to hold each column selected in query
            String str_jobapplications_JobUrl;
            String str_jobapplications_JobBoard;
            String str_jobapplications_JobTitle;
            String str_jobapplications_CompanyTitle;
            DateTime dt_jobapplications_DateAdded;
            DateTime dt_jobapplications_DateLastModified;
            DateTime dt_jobapplications_DateApplied;
            String str_jobapplications_ApplicationStatus;
            String str_jobapplications_Keyword;
            String str_jobapplications_Location;
            String str_jobapplications_Comments;
            // Define a datatable that we will define columns in to match the columns
            // selected in the query. We will use sqldatareader to read the results
            // from the sql query one row at a time. Then we will add each of those
            // rows to the datatable - this is where you can modify the information
            // returned from the sql query one row at a time. Finally, we will
            // bind the table to the gridview.
            DataTable dt = new DataTable();

            using (SqlConnection connection = new SqlConnection(strConnectionString))
            {
                SqlCommand command = new SqlCommand(queryString, connection);

                connection.Open();

                SqlDataReader reader = command.ExecuteReader();
                // Define a column in the table for each column that was selected in the sql query 
                // We do this before the sqldatareader loop because the columns only need to be  
                // defined once. 

                DataColumn column = null;
                column = new DataColumn("jobapplications_JobUrl", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_JobBoard", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_JobTitle", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_CompanyTitle", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_DateAdded", Type.GetType("System.DateTime"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_DateLastModified", Type.GetType("System.DateTime"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_DateApplied", Type.GetType("System.DateTime"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_ApplicationStatus", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_Keyword", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_Location", Type.GetType("System.String"));
                dt.Columns.Add(column);
                column = new DataColumn("jobapplications_Comments", Type.GetType("System.String"));
                dt.Columns.Add(column);
                // Read the results from the sql query one row at a time 
                while (reader.Read())
                {
                    // define a new datatable row to hold the row read from the sql query 
                    DataRow dataRow = dt.NewRow();
                    // Move each field from the reader to a holding field in .net 
                    // ******************************************************************** 
                    // The holding field in .net is where you can alter the contents of the 
                    // field 
                    // ******************************************************************** 
                    // Then, you move the contents of the holding .net field to the column in 
                    // the datarow that you defined above 
                    if (!(reader.IsDBNull(0)))
                    {
                        str_jobapplications_JobUrl = reader.GetString(0);
                        dataRow["jobapplications_JobUrl"] = str_jobapplications_JobUrl;
                    }
                    if (!(reader.IsDBNull(1)))
                    {
                        str_jobapplications_JobBoard = reader.GetString(1);
                        dataRow["jobapplications_JobBoard"] = str_jobapplications_JobBoard;
                    }
                    if (!(reader.IsDBNull(2)))
                    {
                        str_jobapplications_JobTitle = reader.GetString(2);
                        dataRow["jobapplications_JobTitle"] = str_jobapplications_JobTitle;
                    }
                    if (!(reader.IsDBNull(3)))
                    {
                        str_jobapplications_CompanyTitle = reader.GetString(3);
                        dataRow["jobapplications_CompanyTitle"] = str_jobapplications_CompanyTitle;
                    }
                    if (!(reader.IsDBNull(4)))
                    {
                        dt_jobapplications_DateAdded = reader.GetDateTime(4);
                        dataRow["jobapplications_DateAdded"] = dt_jobapplications_DateAdded;
                    }
                    if (!(reader.IsDBNull(5)))
                    {
                        dt_jobapplications_DateLastModified = reader.GetDateTime(5);
                        dataRow["jobapplications_DateLastModified"] = dt_jobapplications_DateLastModified;
                    }
                    if (!(reader.IsDBNull(6)))
                    {
                        dt_jobapplications_DateApplied = reader.GetDateTime(6);
                        dataRow["jobapplications_DateApplied"] = dt_jobapplications_DateApplied;
                    }
                    if (!(reader.IsDBNull(7)))
                    {
                        str_jobapplications_ApplicationStatus = reader.GetString(7);
                        dataRow["jobapplications_ApplicationStatus"] = str_jobapplications_ApplicationStatus;
                    }
                    if (!(reader.IsDBNull(8)))
                    {
                        str_jobapplications_Keyword = reader.GetString(8);
                        dataRow["jobapplications_Keyword"] = str_jobapplications_Keyword;
                    }
                    if (!(reader.IsDBNull(9)))
                    {
                        str_jobapplications_Location = reader.GetString(9);
                        dataRow["jobapplications_Location"] = str_jobapplications_Location;
                    }
                    if (!(reader.IsDBNull(10)))
                    {
                        str_jobapplications_Comments = reader.GetString(10);
                        dataRow["jobapplications_Comments"] = str_jobapplications_Comments;
                    }
                    // Add the row to the datatable 
                    dt.Rows.Add(dataRow);
                }

                

            // Call Close when done reading. 
            reader.Close();
                SampleGrid.ItemsSource = dt.DefaultView; ;
            }

            // ============
         
        }

        private void DataGrid_Click(object sender, RoutedEventArgs e)
        {
            var hyperlink = e.OriginalSource as Hyperlink;
            if (hyperlink != null)
            {
                Process.Start(hyperlink.NavigateUri.ToString());
            }
        }

        private void Info_Click(object sender, RoutedEventArgs e)
        {
            var selectedItems = SampleGrid.SelectedCells.Select(c => CellData(c));
            string msg = selectedItems.Aggregate((c, n) => c + Environment.NewLine + n);
            MessageBox.Show(msg);
        }

        private string CellData(DataGridCellInfo cell)
        {
            return string.Format("{0}/{1} = {2}"
                , ((Planet)cell.Item).Name, cell.Column.Header
                , cell.Column.GetCellContent(cell.Item));
        }

        private void SelectAll_Click(object sender, RoutedEventArgs e)
        {
            SampleGrid.SelectAllCells();
        }

        private void UnselectAll_Click(object sender, RoutedEventArgs e)
        {
            SampleGrid.UnselectAllCells();
        }

        private void ShowData_Click(object sender, RoutedEventArgs e)
        {
            var data = new StringBuilder();

            foreach (var planet in DataContext as List<Planet>)
            {
                data.Append(planet.Name).Append(", Rings? ")
                    .Append(planet.HasRings).Append(", Magnetic Field? ")
                    .Append(planet.GlobalMagneticField).Append(", ")
                    .Append(planet.Moons).Append(" Moon(s), ")
                    .AppendLine(planet.Category);
            }

            MessageBox.Show(data.ToString());
        }
        private void ApplicationStatusSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var comboBox = sender as ComboBox;
            DataRowView selectedItem = (DataRowView)this.SampleGrid.CurrentItem;
            if (selectedItem.Row.ItemArray[7].ToString() == comboBox.SelectedItem.ToString())
            {
                return;
            }
            //Create Connection
            SqlConnection thisConnection = new SqlConnection(@"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI");
            OpenConnection(thisConnection);
            try
            {
                // 1. Create Command
                // Sql Update Statement
                string updateSql = "UPDATE JobApplications " + "SET ApplicationStatus = @ApplicationStatus, DateApplied = @DateApplied, DateLastModified = @DateLastModified " + "WHERE JobUrl = @JobUrl";
                SqlCommand UpdateCmd = new SqlCommand(updateSql, thisConnection);

                // 2. Map Parameters
              
                UpdateCmd.Parameters.Add("@ApplicationStatus", SqlDbType.NVarChar, 50, "ApplicationStatus");

                UpdateCmd.Parameters.Add("@JobUrl", SqlDbType.NVarChar, 4000, "JobUrl");
                UpdateCmd.Parameters.Add("@DateApplied", SqlDbType.DateTime);
                UpdateCmd.Parameters.Add("@DateLastModified", SqlDbType.DateTime);

                UpdateCmd.Parameters["@ApplicationStatus"].Value = comboBox.SelectedItem;
                UpdateCmd.Parameters["@JobUrl"].Value = selectedItem.Row.ItemArray[0];
                if (comboBox.SelectedItem.ToString() == "Applied")
                {
                    UpdateCmd.Parameters["@DateApplied"].Value = System.DateTime.Now;
                } else
                {
                    UpdateCmd.Parameters["@DateApplied"].Value = DBNull.Value;
                }
                UpdateCmd.Parameters["@DateLastModified"].Value = System.DateTime.Now;
                UpdateCmd.ExecuteNonQuery();
            }

            catch (SqlException ex)
            {
                // Display error
                Console.WriteLine("Error: " + ex.ToString());
            }

            // Close Connection
            thisConnection.Close();
            SetUpPlanets();

        }
        void OpenConnection(SqlConnection con)
        {
            try
            {
                // Open Connection
                con.Open();
                Console.WriteLine("Connection Opened");
            }
            catch (SqlException ex)
            {
                // Display error
                Console.WriteLine("Error: " + ex.ToString());
            }
        }
        private void Comments_LostFocus(object sender, RoutedEventArgs e)
        {
            DataGridCell myCell = sender as DataGridCell;
            DataRowView selectedItem = (DataRowView)this.SampleGrid.CurrentItem;
            


                SqlConnection thisConnection = new SqlConnection(@"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI");
                OpenConnection(thisConnection);
                try
                {
                    // 1. Create Command
                    // Sql Update Statement
                    string updateSql = "UPDATE JobApplications " + "SET Comments = @Comments, DateLastModified = @DateLastModified " + "WHERE JobUrl = @JobUrl";
                    SqlCommand UpdateCmd = new SqlCommand(updateSql, thisConnection);

                    // 2. Map Parameters



                    UpdateCmd.Parameters.Add("@JobUrl", SqlDbType.NVarChar, 4000, "JobUrl");
                    UpdateCmd.Parameters.Add("@Comments", SqlDbType.VarChar, 2000, "Comments");
                    UpdateCmd.Parameters.Add("@DateLastModified", SqlDbType.DateTime);

                    UpdateCmd.Parameters["@Comments"].Value = ((TextBox)sender).Text;
                    UpdateCmd.Parameters["@JobUrl"].Value = selectedItem.Row.ItemArray[0];

                    UpdateCmd.Parameters["@DateLastModified"].Value = System.DateTime.Now;
                    UpdateCmd.ExecuteNonQuery();
                }

                catch (SqlException ex)
                {
                    // Display error
                    Console.WriteLine("Error: " + ex.ToString());
                }

                // Close Connection
                thisConnection.Close();
                SetUpPlanets();
            
        }
    }
}
