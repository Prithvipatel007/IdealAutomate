using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Windows.Input;
using System.Collections.ObjectModel;
using DataGridExtensionsSample;
using System.Data;
using System.Data.SqlClient;

namespace DataGridFilterTest.TestData
{
    public class TestDataGenerator : INotifyPropertyChanged
    {
        private TestDataGenerator()
        {
            jobApplicationList = new ObservableCollection<DataItem>();
            employeePositionList = new ObservableCollection<EmployeePosition>();
            NumberOfRecordsToGenerate = 1000;
        }

        static TestDataGenerator()
        {
            instance = null;
        }

        private ObservableCollection<DataItem> jobApplicationList;
        private ObservableCollection<Employee> employeeListCopy;

        private ObservableCollection<EmployeePosition> employeePositionList;
        private ObservableCollection<EmployeeStatus> employeeStatusList;
        private double testDataGenerationPercent;
        private bool isTestDataGenerationInProgress;
        private int numberOfRecordsToGenerate;

        private static TestDataGenerator instance;

        public static TestDataGenerator Instance
        {
            get
            {
                if (instance == null) instance = new TestDataGenerator();

                return instance;
            }
        }

        public int NumberOfRecordsToGenerate
        {
            get
            {
                return numberOfRecordsToGenerate;
            }
            set
            {
                numberOfRecordsToGenerate = value;
                NotifyPropertyChanged("NumberOfRecordsToGenerate");
            }
        }

        public ObservableCollection<DataItem> JobApplicationList
        {
            get
            {
                return jobApplicationList;
            }
            set
            {
                jobApplicationList = value;
                NotifyPropertyChanged("JobApplicationList");
            }
        }

        public ObservableCollection<Employee> EmployeeListCopy
        {
            get
            {
                return employeeListCopy;
            }
            set
            {
                employeeListCopy = value;
                NotifyPropertyChanged("EmployeeListCopy");
            }
        }

        public ObservableCollection<EmployeePosition> EmployeePositionList
        {
            get
            {
                return employeePositionList;
            }
            set
            {
                employeePositionList = value;
                NotifyPropertyChanged("EmployeePositionList");
            }
        }

        public ObservableCollection<EmployeeStatus> EmployeeStatuses
        {
            get
            {
                return employeeStatusList;
            }
            set
            {
                employeeStatusList = value;
                NotifyPropertyChanged("EmployeeStatuses");
            }
        }

        public double TestDataGenerationPercent
        {
            get
            {
                return testDataGenerationPercent;
            }
            set
            {
                testDataGenerationPercent = value;
                NotifyPropertyChanged("TestDataGenerationPercent");
            }
        }

        public bool IsTestDataGenerationInProgress
        {
            get
            {
                return isTestDataGenerationInProgress;
            }
            set
            {
                isTestDataGenerationInProgress = value;
                NotifyPropertyChanged("IsTestDataGenerationInProgress");
            }
        }

        public void GenerateTestData(Action<EventArgs> callback)
        {
            if (NumberOfRecordsToGenerate > 0)
            {
                IsTestDataGenerationInProgress = true;

                BackgroundWorker worker = new BackgroundWorker();

                List<DataItem> list = new List<DataItem>();

                worker.DoWork += delegate(object sender, DoWorkEventArgs e)
                {
                    // ********************************************************************
                    // Code Generated by Ideal Tools Organizer at http://idealautomate.com
                    // ********************************************************************
                    // Define Query String
                    //  "Select * from jobapplications  where dateadded >  cast('06/20/2020' as date)" +
                    string queryString =
                        "Select * from jobapplications where dateadded >  cast('07/01/2020' as date) -- and applicationstatus is null -- where jobboard = 'dice' and location <> 'remote' and applicationstatus is null" +
                       "";
                    // Define Connection String
                    string strConnectionString = null;
                    strConnectionString = @"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI";
                    // Define .net fields to hold each column selected in query
                    String str_jobapplications_JobUrl;
                    String str_jobapplications_JobBoard;
                    String str_jobapplications_JobTitle;
                    String str_jobapplications_CompanyTitle;
                    DateTime dt_jobapplications_DateAdded;
                    DateTime dt_jobapplications_DateLastModified;
                    DateTime dt_jobapplications_DateApplied;
                    String str_jobapplications_ApplicationStatus;
                    String str_jobapplications_Keyword;
                    String str_jobapplications_Location;
                    String str_jobapplications_Comments;
                    // Define a datatable that we will define columns in to match the columns
                    // selected in the query. We will use sqldatareader to read the results
                    // from the sql query one row at a time. Then we will add each of those
                    // rows to the datatable - this is where you can modify the information
                    // returned from the sql query one row at a time. Finally, we will
                    // bind the table to the gridview.
                    DataTable dt = new DataTable();

                    using (SqlConnection connection = new SqlConnection(strConnectionString))
                    {
                        SqlCommand command = new SqlCommand(queryString, connection);

                        connection.Open();

                        SqlDataReader reader = command.ExecuteReader();
                        // Define a column in the table for each column that was selected in the sql query 
                        // We do this before the sqldatareader loop because the columns only need to be  
                        // defined once. 

                        DataColumn column = null;
                        column = new DataColumn("jobapplications_JobUrl", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_JobBoard", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_JobTitle", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_CompanyTitle", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_DateAdded", Type.GetType("System.DateTime"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_DateLastModified", Type.GetType("System.DateTime"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_DateApplied", Type.GetType("System.DateTime"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_ApplicationStatus", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_Keyword", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_Location", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        column = new DataColumn("jobapplications_Comments", Type.GetType("System.String"));
                        dt.Columns.Add(column);
                        // Read the results from the sql query one row at a time 
                        while (reader.Read())
                        {
                            // define a new datatable row to hold the row read from the sql query 
                            DataRow dataRow = dt.NewRow();
                            // Move each field from the reader to a holding field in .net 
                            // ******************************************************************** 
                            // The holding field in .net is where you can alter the contents of the 
                            // field 
                            // ******************************************************************** 
                            // Then, you move the contents of the holding .net field to the column in 
                            // the datarow that you defined above 
                            if (!(reader.IsDBNull(0)))
                            {
                                str_jobapplications_JobUrl = reader.GetString(0);
                                dataRow["jobapplications_JobUrl"] = str_jobapplications_JobUrl;
                            }
                            if (!(reader.IsDBNull(1)))
                            {
                                str_jobapplications_JobBoard = reader.GetString(1);
                                dataRow["jobapplications_JobBoard"] = str_jobapplications_JobBoard;
                            }
                            if (!(reader.IsDBNull(2)))
                            {
                                str_jobapplications_JobTitle = reader.GetString(2);
                                dataRow["jobapplications_JobTitle"] = str_jobapplications_JobTitle;
                            }
                            if (!(reader.IsDBNull(3)))
                            {
                                str_jobapplications_CompanyTitle = reader.GetString(3);
                                dataRow["jobapplications_CompanyTitle"] = str_jobapplications_CompanyTitle;
                            }
                            if (!(reader.IsDBNull(4)))
                            {
                                dt_jobapplications_DateAdded = reader.GetDateTime(4);
                                dataRow["jobapplications_DateAdded"] = dt_jobapplications_DateAdded;
                            }
                            if (!(reader.IsDBNull(5)))
                            {
                                dt_jobapplications_DateLastModified = reader.GetDateTime(5);
                                dataRow["jobapplications_DateLastModified"] = dt_jobapplications_DateLastModified;
                            }
                            if (!(reader.IsDBNull(6)))
                            {
                                dt_jobapplications_DateApplied = reader.GetDateTime(6);
                                dataRow["jobapplications_DateApplied"] = dt_jobapplications_DateApplied;
                            }
                            if (!(reader.IsDBNull(7)))
                            {
                                str_jobapplications_ApplicationStatus = reader.GetString(7);
                                dataRow["jobapplications_ApplicationStatus"] = str_jobapplications_ApplicationStatus;
                            }
                            if (!(reader.IsDBNull(8)))
                            {
                                str_jobapplications_Keyword = reader.GetString(8);
                                dataRow["jobapplications_Keyword"] = str_jobapplications_Keyword;
                            }
                            if (!(reader.IsDBNull(9)))
                            {
                                str_jobapplications_Location = reader.GetString(9);
                                dataRow["jobapplications_Location"] = str_jobapplications_Location;
                            }
                            if (!(reader.IsDBNull(10)))
                            {
                                str_jobapplications_Comments = reader.GetString(10);
                                dataRow["jobapplications_Comments"] = str_jobapplications_Comments;
                            }
                            // Add the row to the datatable 
                            dt.Rows.Add(dataRow);
                        }



                        // Call Close when done reading. 
                        reader.Close();
                        //  SampleGrid.ItemsSource = dt.DefaultView;


                        int ctr = 0;
                        foreach (DataRow item in dt.Rows)
                        {
                            DataItem dataItem = new DataItem(ctr++);
                            dataItem.str_jobapplications_JobUrl = item["jobapplications_JobUrl"].ToString();
                            dataItem.str_jobapplications_JobBoard = item["jobapplications_JobBoard"].ToString();
                            dataItem.str_jobapplications_JobTitle = item["jobapplications_JobTitle"].ToString();
                            dataItem.str_jobapplications_CompanyTitle = item["jobapplications_CompanyTitle"].ToString();
                            if (item["jobapplications_DateAdded"] != null && item["jobapplications_DateAdded"].ToString() != "")
                            {
                                dataItem.dt_jobapplications_DateAdded = DateTime.Parse(item["jobapplications_DateAdded"].ToString());
                            }
                            if (item["jobapplications_DateLastModified"] != null && item["jobapplications_DateLastModified"].ToString() != "")
                            {
                                dataItem.dt_jobapplications_DateLastModified = DateTime.Parse(item["jobapplications_DateLastModified"].ToString());
                            }
                            if (item["jobapplications_DateApplied"] != null && item["jobapplications_DateApplied"].ToString() != "")
                            {
                                dataItem.dt_jobapplications_DateApplied = DateTime.Parse(item["jobapplications_DateApplied"].ToString());
                            }
                            dataItem.str_jobapplications_ApplicationStatus = item["jobapplications_ApplicationStatus"].ToString();
                            dataItem.str_jobapplications_Keyword = item["jobapplications_Keyword"].ToString();
                            dataItem.str_jobapplications_Location = item["jobapplications_Location"].ToString();
                            dataItem.str_jobapplications_Comments = item["jobapplications_Comments"].ToString();
                            list.Add(dataItem);
                        }
   
                    }
                };

                worker.RunWorkerCompleted += delegate(object sender, RunWorkerCompletedEventArgs e)
                {
                    EmployeeStatuses = new ObservableCollection<EmployeeStatus>( STATUS.ToList());
                    EmployeePositionList = new ObservableCollection<EmployeePosition>(POSITIONS.ToList());

                    JobApplicationList = new ObservableCollection<DataItem>(list);



                    IsTestDataGenerationInProgress = false;

                    if (callback != null) callback(EventArgs.Empty);
                };

                worker.RunWorkerAsync();
            }
        }

    
        #region Internal - random data generation
        
        Random random;
        private void initRandomGenerator()
        {
            random = new Random((int)DateTime.Now.Ticks);

            random = new Random((int)new DateTime(
                random.Next(DateTime.MinValue.Year, DateTime.MaxValue.Year), 
                random.Next(1,12), 
                random.Next(1,28)).Ticks);

            System.Threading.Thread.Sleep(5);
        }

        private void fillWithTheRandomData(Employee e, int i)
        {
            e.Id               = i;

            e.Name             = getRandomName();
            e.Email            = getRandomEmail(e.Name);
            e.Address          = getRandomAddress();
            e.EmployeeGuid     = getEmployeeGuid(i);
            e.WorkExperience = random.Next(0, 40);
            e.Position         = i % 13 == 0 ? null : getRadndomPosition();
            e.EmployeeStatusId = getRandomStatusId();
            e.IsInterviewed    = getRandomIsInterviewed();
            e.DateOfBirth      = getRandomDateOfBirth();
        }

        private string getRandomName()
        {
            int number = random.Next(NAMES.Length - 1);

            return NAMES[number];
        }

        private string getRandomEmail(string email)
        {
            return email + "-" + getRandomString(3) + "@" + getRandomDomain();
        }

        private string getRandomAddress()
        {
            return getRandomString(random.Next(5, 10)) + ", " + getRandomString(random.Next(5, 15)) + " " + random.Next(0, 200);
        }

        private Guid? getEmployeeGuid(int i)
        {
            Guid? value;

            if (i % 10 == 0)
            {
                value = null;
            }
            else
            {
                value = Guid.NewGuid();
            }

            return value;
        }

        private EmployeePosition getRadndomPosition()
        {
            int number = random.Next(POSITIONS.Length - 1);

            return POSITIONS[number];
        }

        private int getRandomStatusId()
        {
            return random.Next(1, STATUS.Length);
        }

        private bool getRandomIsInterviewed()
        {
            return random.NextDouble() < 0.5 ? false : true;
        }

        private DateTime getRandomDateOfBirth()
        {
            return new DateTime(
                random.Next(1950, 1990), random.Next(1, 12), random.Next(1, 28));
        }

        private readonly string[] NAMES = new string[]
        {
            "Mark", "Tom", "Harry", "Sally", "Sandra", "Paul", "Anastasia", "David", "Alex", "Michael", "Tina", "Zachary", "Bob", "Elise",
            "Jime", "Anderry","Rustin","Ivadon","Nichardo","Jasey","Rent","Millack","Alenn","Serrett","Tanifer","Syllica","Allickie","Jacey"
            ,"Janther","Racey","Alicherry","Clary","Kather","Bonna"
        };

        private readonly string[] DOMAINS = new string[]
        {
            "xxx.com", "aa.com", "min.com", "erp.com", "holidays.com", "mon.com", "san.com", "sun.com", "ibm.com", "hp.com", "google.com", "yahoo.com", "bing.com", "ask.com"
        };

        private readonly string ASCII = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

        private readonly EmployeeStatus[] STATUS = new EmployeeStatus[]
        {     
            new EmployeeStatus{Id="Applied", Name="Applied"},
            new EmployeeStatus{Id="Not Applied", Name="Not Applied"},
            new EmployeeStatus{Id="Not Interested", Name="Not Interested"},
            new EmployeeStatus{Id="Not Qualified", Name="Not Qualified"},
            new EmployeeStatus{Id="Not Remote", Name="Not Remote"},
            new EmployeeStatus{Id="Closed", Name="Closed"},
            new EmployeeStatus{Id="Duplicate", Name="Duplicate"},
            new EmployeeStatus{Id="Too much travel", Name="Too much travel"},
            new EmployeeStatus{Id="Requires Relocation", Name="Requires Relocation"},
            new EmployeeStatus{Id="Wrong location", Name="Wrong location"},
            new EmployeeStatus{Id="Broken Link", Name="Broken Link"}


        };

        private readonly EmployeePosition[] POSITIONS = new EmployeePosition[] 
        { 
            new EmployeePosition {Id=1,  Name="EAP Specialist"},
            new EmployeePosition {Id=2,  Name="Instructor"},
            new EmployeePosition {Id=3,  Name="Full professor"},
            new EmployeePosition {Id=4,  Name="ERP Specialist"},
            new EmployeePosition {Id=5,  Name="SQL Programmer"},
            new EmployeePosition {Id=6,  Name="QA Tester"},
            new EmployeePosition {Id=7,  Name="Senior Software Engineer "},
            new EmployeePosition {Id=8,  Name="Technical Analyst"},
            new EmployeePosition {Id=9,  Name="Web Master"},
            new EmployeePosition {Id=10, Name="Programmer Analyst "}
        };

        private string getRandomDomain()
        {
            int number = random.Next(DOMAINS.Length - 1);

            return NAMES[number];
        }

        private char getRandomChar()
        {
            int number = random.Next(ASCII.Length - 1);

            return ASCII[number];
        }

        private string getRandomString(int length)
        {
            StringBuilder randomString = new StringBuilder();

            for(int i = 0; i < length; i++)
            {
                randomString.Append(getRandomChar());
            }

            return randomString.ToString();
        }
        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
